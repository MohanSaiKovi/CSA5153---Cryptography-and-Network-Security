#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <time.h>
#include <ctype.h>

#define ALPHABET_SIZE 26

void generate_random_key(char key[ALPHABET_SIZE]) {
    int i, j;
    char temp;
    for (i = 0; i < ALPHABET_SIZE; i++) {
        key[i] = 'A' + i;
    }
    for (i = ALPHABET_SIZE - 1; i > 0; i--) {
        j = rand() % (i + 1);
        temp = key[i];
        key[i] = key[j];
        key[j] = temp;
    }
}

void encrypt(char *plaintext, char *key, char *ciphertext) {
    int i;
    for (i = 0; plaintext[i] != '\0'; i++) {
        if (isalpha(plaintext[i])) {
            char base = isupper(plaintext[i]) ? 'A' : 'a';
            ciphertext[i] = key[plaintext[i] - base];
        } else {
            ciphertext[i] = plaintext[i];
        }
    }
    ciphertext[i] = '\0';
}

void decrypt(char *ciphertext, char *key, char *plaintext) {
    int i;
    char inverse_key[ALPHABET_SIZE];
    for (i = 0; i < ALPHABET_SIZE; i++) {
        inverse_key[key[i] - 'A'] = 'A' + i;
    }
    for (i = 0; ciphertext[i] != '\0'; i++) {
        if (isalpha(ciphertext[i])) {
            char base = isupper(ciphertext[i]) ? 'A' : 'a';
            plaintext[i] = inverse_key[ciphertext[i] - base];
        } else {
            plaintext[i] = ciphertext[i];
        }
    }
    plaintext[i] = '\0';
}

int main() {
    char plaintext[100], ciphertext[100], decrypted_text[100];
    char key[ALPHABET_SIZE];

    srand(time(NULL));
    generate_random_key(key);

    printf("Randomly generated key:\n");
    for (int i = 0; i < ALPHABET_SIZE; i++) {
        printf("%c ", key[i]);
    }
    printf("\n");

    printf("Enter the plaintext: ");
    fgets(plaintext, sizeof(plaintext), stdin);
    plaintext[strcspn(plaintext, "\n")] = '\0';

    encrypt(plaintext, key, ciphertext);
    printf("Ciphertext: %s\n", ciphertext);

    decrypt(ciphertext, key, decrypted_text);
    printf("Decrypted text: %s\n", decrypted_text);

    return 0;
}
